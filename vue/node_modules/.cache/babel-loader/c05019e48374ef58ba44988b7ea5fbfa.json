{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: \"/api\",\n  timeout: 5000\n}); // 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\n\nconst whiteUrls = [\"/user/login\", '/user/register']; // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // 取出sessionStorage里面缓存的用户信息\n\n  let userJson = sessionStorage.getItem(\"user\");\n\n  if (!whiteUrls.includes(config.url)) {\n    // 校验请求白名单\n    if (!userJson) {\n      router.push(\"/login\");\n    } else {\n      let user = JSON.parse(userJson);\n      config.headers['token'] = user.token; // 设置请求头\n    }\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } // 验证token\n\n\n  if (res.code === '401') {\n    console.error(\"token过期，重新登录\");\n    router.push(\"/login\");\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","whiteUrls","interceptors","use","config","headers","userJson","sessionStorage","getItem","includes","url","push","user","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","console","log"],"sources":["D:/Desktop/springboot+vue/springboot-vue-demo/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\n\nconst request = axios.create({\n    baseURL: \"/api\",\n    timeout: 5000\n})\n\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\nconst whiteUrls = [\"/user/login\", '/user/register']\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // 取出sessionStorage里面缓存的用户信息\n    let userJson = sessionStorage.getItem(\"user\")\n    if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n        if(!userJson) {\n            router.push(\"/login\")\n        } else {\n            let user = JSON.parse(userJson);\n            config.headers['token'] = user.token;  // 设置请求头\n        }\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 验证token\n        if (res.code === '401') {\n            console.error(\"token过期，重新登录\")\n            router.push(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAE,MADgB;EAEzBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,CAAlB,C,CAEA;AACA;AACA;;AACAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiCC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;;EACA,IAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAf;;EACA,IAAI,CAACP,SAAS,CAACQ,QAAV,CAAmBL,MAAM,CAACM,GAA1B,CAAL,EAAqC;IAAG;IACpC,IAAG,CAACJ,QAAJ,EAAc;MACVV,MAAM,CAACe,IAAP,CAAY,QAAZ;IACH,CAFD,MAEO;MACH,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,QAAX,CAAX;MACAF,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BO,IAAI,CAACG,KAA/B,CAFG,CAEoC;IAC1C;EACJ;;EACD,OAAOX,MAAP;AACH,CAdD,EAcGY,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBD,E,CAkBA;AACA;;AACAnB,OAAO,CAACK,YAAR,CAAqBiB,QAArB,CAA8BhB,GAA9B,CACIgB,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;EACA,IAAIF,QAAQ,CAACf,MAAT,CAAgBkB,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOF,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;EACH,CATO,CAUR;;;EACA,IAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;IACpBC,OAAO,CAACR,KAAR,CAAc,cAAd;IACApB,MAAM,CAACe,IAAP,CAAY,QAAZ;EACH;;EACD,OAAOS,GAAP;AACH,CAjBL,EAkBIJ,KAAK,IAAI;EACLQ,OAAO,CAACC,GAAR,CAAY,QAAQT,KAApB,EADK,CACsB;;EAC3B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBL;AAyBA,eAAenB,OAAf"},"metadata":{},"sourceType":"module"}