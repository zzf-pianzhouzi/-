{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nlet socket;\nexport default {\n  name: \"Im\",\n\n  data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: '',\n      text: \"\",\n      messages: [],\n      content: ''\n    };\n  },\n\n  created() {\n    this.init();\n  },\n\n  methods: {\n    send() {\n      if (!this.chatUser) {\n        this.$message({\n          type: 'warning',\n          message: \"请选择聊天对象\"\n        });\n        return;\n      }\n\n      if (!this.text) {\n        this.$message({\n          type: 'warning',\n          message: \"请输入内容\"\n        });\n      } else {\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\"); // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n          let message = {\n            from: this.user.username,\n            to: this.chatUser,\n            text: this.text\n          };\n          socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，由服务端进行转发\n\n          this.messages.push({\n            user: this.user.username,\n            text: this.text\n          }); // 构建消息内容，本人消息\n\n          this.createContent(null, this.user.username, this.text);\n          this.text = '';\n        }\n      }\n    },\n\n    createContent(remoteUser, nowUser, text) {\n      // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html; // 当前用户消息\n\n      if (nowUser) {\n        // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" + \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-2\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"</div>\";\n      } else if (remoteUser) {\n        // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" + \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"</div>\";\n      }\n\n      console.log(html);\n      this.content += html;\n    },\n\n    init() {\n      this.user = sessionStorage.getItem(\"user\") ? JSON.parse(sessionStorage.getItem(\"user\")) : {};\n      let username = this.user.username;\n\n      let _this = this;\n\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9090/imserver/\" + username;\n\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        } // 开启一个websocket服务\n\n\n        socket = new WebSocket(socketUrl); //打开事件\n\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        }; //  浏览器端收消息，获得从服务端发送过来的文本消息\n\n\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data);\n          let data = JSON.parse(msg.data); // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n\n          if (data.users) {\n            // 获取在线人员信息\n            _this.users = data.users.filter(user => user.username !== username); // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data); // 构建消息内容\n\n\n              _this.createContent(data.from, null, data.text);\n            }\n          }\n        }; //关闭事件\n\n\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        }; //发生了错误事件\n\n\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAqCA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,IAAIC,MAAJ;AAEA,eAAe;EACbC,IAAI,EAAE,IADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,qEADN;MAELC,IAAI,EAAE,EAFD;MAGLC,UAAU,EAAE,KAHP;MAILC,KAAK,EAAE,EAJF;MAKLC,QAAQ,EAAE,EALL;MAMLC,IAAI,EAAE,EAND;MAOLC,QAAQ,EAAE,EAPL;MAQLC,OAAO,EAAE;IARJ,CAAP;EAUD,CAbY;;EAcbC,OAAO,GAAG;IACR,KAAKC,IAAL;EACD,CAhBY;;EAiBbC,OAAO,EAAE;IACPC,IAAI,GAAG;MACL,IAAI,CAAC,KAAKP,QAAV,EAAoB;QAClB,KAAKQ,QAAL,CAAc;UAACC,IAAI,EAAE,SAAP;UAAkBC,OAAO,EAAE;QAA3B,CAAd;QACA;MACF;;MACA,IAAI,CAAC,KAAKT,IAAV,EAAgB;QACd,KAAKO,QAAL,CAAc;UAACC,IAAI,EAAE,SAAP;UAAkBC,OAAO,EAAE;QAA3B,CAAd;MACF,CAFA,MAEO;QACL,IAAI,OAAQC,SAAR,IAAsB,WAA1B,EAAuC;UACrCC,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACF,CAFA,MAEO;UACLD,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADK,CAEL;UACA;;UACA,IAAIH,OAAM,GAAI;YAACI,IAAI,EAAE,KAAKjB,IAAL,CAAUkB,QAAjB;YAA2BC,EAAE,EAAE,KAAKhB,QAApC;YAA8CC,IAAI,EAAE,KAAKA;UAAzD,CAAd;UACAR,MAAM,CAACc,IAAP,CAAYU,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAZ,EALK,CAKkC;;UACvC,KAAKR,QAAL,CAAciB,IAAd,CAAmB;YAACtB,IAAI,EAAE,KAAKA,IAAL,CAAUkB,QAAjB;YAA2Bd,IAAI,EAAE,KAAKA;UAAtC,CAAnB,EANK,CAOL;;UACA,KAAKmB,aAAL,CAAmB,IAAnB,EAAyB,KAAKvB,IAAL,CAAUkB,QAAnC,EAA6C,KAAKd,IAAlD;UACA,KAAKA,IAAL,GAAY,EAAZ;QACF;MACF;IACD,CAvBM;;IAwBPmB,aAAa,CAACC,UAAD,EAAaC,OAAb,EAAsBrB,IAAtB,EAA4B;MAAG;MAC1C,IAAIsB,IAAJ,CADuC,CAEvC;;MACA,IAAID,OAAJ,EAAa;QAAE;QACbC,IAAG,GAAI,sDACH,uFADG,GAEH,8BAFG,GAE8BtB,IAF9B,GAEqC,UAFrC,GAGH,YAHG,GAIH,qCAJG,GAKH,0GALG,GAMH,sHANG,GAOH,aAPG,GAQH,YARG,GASH,QATJ;MAUF,CAXA,MAWO,IAAIoB,UAAJ,EAAgB;QAAI;QACzBE,IAAG,GAAI,sDACH,iEADG,GAEH,0GAFG,GAGH,sHAHG,GAIH,aAJG,GAKH,YALG,GAMH,qFANG,GAOH,+BAPG,GAO+BtB,IAP/B,GAOsC,UAPtC,GAQH,YARG,GASH,QATJ;MAUF;;MACAW,OAAO,CAACC,GAAR,CAAYU,IAAZ;MACA,KAAKpB,OAAL,IAAgBoB,IAAhB;IACD,CApDM;;IAqDPlB,IAAI,GAAG;MACL,KAAKR,IAAL,GAAY2B,cAAc,CAACC,OAAf,CAAuB,MAAvB,IAAiCR,IAAI,CAACS,KAAL,CAAWF,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAX,CAAjC,GAA8E,EAA1F;MACA,IAAIV,QAAO,GAAI,KAAKlB,IAAL,CAAUkB,QAAzB;;MACA,IAAIY,KAAI,GAAI,IAAZ;;MACA,IAAI,OAAQhB,SAAR,IAAsB,WAA1B,EAAuC;QACrCC,OAAO,CAACC,GAAR,CAAY,mBAAZ;MACF,CAFA,MAEO;QACLD,OAAO,CAACC,GAAR,CAAY,kBAAZ;QACA,IAAIe,SAAQ,GAAI,kCAAkCb,QAAlD;;QACA,IAAItB,MAAK,IAAK,IAAd,EAAoB;UAClBA,MAAM,CAACoC,KAAP;UACApC,MAAK,GAAI,IAAT;QACF,CANK,CAOL;;;QACAA,MAAK,GAAI,IAAIkB,SAAJ,CAAciB,SAAd,CAAT,CARK,CASL;;QACAnC,MAAM,CAACqC,MAAP,GAAgB,YAAY;UAC1BlB,OAAO,CAACC,GAAR,CAAY,cAAZ;QACD,CAFD,CAVK,CAaL;;;QACApB,MAAM,CAACsC,SAAP,GAAmB,UAAUC,GAAV,EAAe;UAChCpB,OAAO,CAACC,GAAR,CAAY,aAAamB,GAAG,CAACrC,IAA7B;UACA,IAAIA,IAAG,GAAIsB,IAAI,CAACS,KAAL,CAAWM,GAAG,CAACrC,IAAf,CAAX,CAFgC,CAEC;;UACjC,IAAIA,IAAI,CAACI,KAAT,EAAgB;YAAG;YACjB4B,KAAK,CAAC5B,KAAN,GAAcJ,IAAI,CAACI,KAAL,CAAWkC,MAAX,CAAkBpC,IAAG,IAAKA,IAAI,CAACkB,QAAL,KAAkBA,QAA5C,CAAd,CADc,CACuD;UACvE,CAFA,MAEO;YACL;YACA;YACA,IAAIpB,IAAI,CAACmB,IAAL,KAAca,KAAK,CAAC3B,QAAxB,EAAkC;cAChC2B,KAAK,CAACzB,QAAN,CAAeiB,IAAf,CAAoBxB,IAApB,EADgC,CAEhC;;;cACAgC,KAAK,CAACP,aAAN,CAAoBzB,IAAI,CAACmB,IAAzB,EAA+B,IAA/B,EAAqCnB,IAAI,CAACM,IAA1C;YACF;UACF;QACD,CAdD,CAdK,CA6BL;;;QACAR,MAAM,CAACyC,OAAP,GAAiB,YAAY;UAC3BtB,OAAO,CAACC,GAAR,CAAY,cAAZ;QACD,CAFD,CA9BK,CAiCL;;;QACApB,MAAM,CAAC0C,OAAP,GAAiB,YAAY;UAC3BvB,OAAO,CAACC,GAAR,CAAY,gBAAZ;QACF,CAFA;MAGF;IACF;;EAjGO;AAjBI,CAAf","names":["request","socket","name","data","circleUrl","user","isCollapse","users","chatUser","text","messages","content","created","init","methods","send","$message","type","message","WebSocket","console","log","from","username","to","JSON","stringify","push","createContent","remoteUser","nowUser","html","sessionStorage","getItem","parse","_this","socketUrl","close","onopen","onmessage","msg","filter","onclose","onerror"],"sourceRoot":"","sources":["D:\\Desktop\\springboot+vue\\springboot-vue-demo\\src\\views\\Im.vue"],"sourcesContent":["<template>\n  <div style=\"padding: 10px; margin-bottom: 50px\">\n    <el-row>\n      <el-col :span=\"4\">\n        <el-card style=\"width: 300px; height: 300px; color: #333\">\n         <div style=\"padding-bottom: 10px; border-bottom: 1px solid #ccc\">在线用户<span style=\"font-size: 12px\">（点击聊天气泡开始聊天）</span></div>\n          <div style=\"padding: 10px 0\" v-for=\"user in users\" :key=\"user.username\">\n            <span>{{ user.username }}</span>\n            <i class=\"el-icon-chat-dot-round\" style=\"margin-left: 10px; font-size: 16px; cursor: pointer\"\n               @click=\"chatUser = user.username\"></i>\n            <span style=\"font-size: 12px;color: limegreen; margin-left: 5px\" v-if=\"user.username === chatUser\">chatting...</span>\n          </div>\n        </el-card>\n      </el-col>\n\n      <el-col :span=\"20\">\n        <div style=\"width: 800px; margin: 0 auto; background-color: white;\n                    border-radius: 5px; box-shadow: 0 0 10px #ccc\">\n          <div style=\"text-align: center; line-height: 50px;\">\n            Web聊天室（{{ chatUser }}）\n          </div>\n          <div style=\"height: 350px; overflow:auto; border-top: 1px solid #ccc\" v-html=\"content\"></div>\n          <div style=\"height: 200px\">\n            <textarea v-model=\"text\" style=\"height: 160px; width: 100%; padding: 20px; border: none; border-top: 1px solid #ccc;\n             border-bottom: 1px solid #ccc; outline: none\"></textarea>\n            <div style=\"text-align: right; padding-right: 10px\">\n              <el-button type=\"primary\" size=\"mini\" @click=\"send\">发送</el-button>\n            </div>\n          </div>\n        </div>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\n\nimport request from \"@/utils/request\";\n\nlet socket;\n\nexport default {\n  name: \"Im\",\n  data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: '',\n      text: \"\",\n      messages: [],\n      content: ''\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    send() {\n      if (!this.chatUser) {\n        this.$message({type: 'warning', message: \"请选择聊天对象\"})\n        return;\n      }\n      if (!this.text) {\n        this.$message({type: 'warning', message: \"请输入内容\"})\n      } else {\n        if (typeof (WebSocket) == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n          let message = {from: this.user.username, to: this.chatUser, text: this.text}\n          socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\n          this.messages.push({user: this.user.username, text: this.text})\n          // 构建消息内容，本人消息\n          this.createContent(null, this.user.username, this.text)\n          this.text = '';\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html\n      // 当前用户消息\n      if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      }\n      console.log(html)\n      this.content += html;\n    },\n    init() {\n      this.user = sessionStorage.getItem(\"user\") ? JSON.parse(sessionStorage.getItem(\"user\")) : {}\n      let username = this.user.username;\n      let _this = this;\n      if (typeof (WebSocket) == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9090/imserver/\" + username;\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl);\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data)\n          let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n          if (data.users) {  // 获取在线人员信息\n            _this.users = data.users.filter(user => user.username !== username)  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data)\n              // 构建消息内容\n              _this.createContent(data.from, null, data.text)\n            }\n          }\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        }\n      }\n    }\n\n  }\n}\n\n</script>\n\n<style>\n.tip {\n  color: white;\n  text-align: center;\n  border-radius: 10px;\n  font-family: sans-serif;\n  padding: 10px;\n  width:auto;\n  display:inline-block !important;\n  display:inline;\n}\n\n.right {\n  background-color: deepskyblue;\n}\n.left {\n  background-color: forestgreen;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}