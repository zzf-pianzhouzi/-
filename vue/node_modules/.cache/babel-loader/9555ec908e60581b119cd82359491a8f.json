{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\n/*request.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n\r\n    //取出sessionStorage里面缓存的用户信息\r\n    const  userJson = sessionStorage.getItem(\"user\");\r\n    if (!userJson){\r\n        router.push(\"/login\")\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});*/\n// response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","response","use","res","data","config","responseType","JSON","parse","error","console","log","Promise","reject"],"sources":["D:/Desktop/javaee大作业/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n/*request.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n\r\n    //取出sessionStorage里面缓存的用户信息\r\n    const  userJson = sessionStorage.getItem(\"user\");\r\n    if (!userJson){\r\n        router.push(\"/login\")\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});*/\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAE,MADgB;EACP;EAClBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,QAArB,CAA8BC,GAA9B,CACID,QAAQ,IAAI;EACR,IAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAnB,CADQ,CAER;;EACA,IAAIH,QAAQ,CAACI,MAAT,CAAgBC,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOH,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWL,GAAX,CAAH,GAAqBA,GAA9B;EACH;;EACD,OAAOA,GAAP;AACH,CAZL,EAaIM,KAAK,IAAI;EACLC,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADK,CACsB;;EAC3B,OAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAhBL;AAoBA,eAAeb,OAAf"},"metadata":{},"sourceType":"module"}